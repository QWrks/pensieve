% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/psSort.R
\name{psSort}
\alias{psSort}
\alias{validate_S3.psSort}
\title{Store an \emph{individual} sort as a character matrix of \emph{item handles}}
\usage{
psSort(sort, grid = NULL, items = NULL, polygon = "rectangle",
  offset = NULL)

\method{validate_S3}{psSort}(x, grid = NULL, items = NULL,
  ps_coll = NULL, lookup = NULL, ...)
}
\arguments{
\item{sort}{A character matrix giving the item positions of the sort.
Items must be identified by their item short handles and must be unique.
If \code{grid} is specified (recommended), only \code{TRUE} cells can have items.
If \code{items} is specified (recommended), only handles from \code{items} can be used.}

\item{grid}{\code{[matrix(logical())]}
giving the available cells for sorting.
Accepts arbitrary dimnames from grid.
If any dimnames are missing, sensible defaults will be set.}

\item{items}{\code{[character()]} giving the \emph{participant-facing} \strong{item content}.
Can be named to provide short, \emph{researcher-facing} \strong{item handles}.
\itemize{
\item if \code{dir_bin} is \code{NULL} (default), \code{items} must be text.
Items can be marked up using \href{https://rmarkdown.rstudio.com/authoring_pandoc_markdown.html}{Pandoc Markdown}.
An additional subclass \code{psItemContentText} is prepended and validated.
\item if \code{dir_bin} is given, \code{items} must be file paths, relative from \code{dir_bin}.
An additional subclass \code{psItemContentBin`` is prepended and validated.}lang\code{,}fontsize_global\code{,}alignment\code{and}linestretch` are ignored.
}}

\item{polygon}{\code{[character(1)]} giving polygon to use for tiling

Must be one of:
\itemize{
\item \code{'rectangle'} (\strong{default}) or
\item \code{'hexagon'}
}}

\item{offset}{\code{[character(1)]} giving the \emph{rows} to be offset.

Must be one of:
\itemize{
\item \code{NULL} in which case no offset is used for a square tiling. (\strong{default})
\item \code{'even'} or
\item \code{'odd'}
}}

\item{x}{An object with one of the pensieve S3 classes.}

\item{ps_coll}{\code{\link{AssertCollection}} ps_coll error collection via \code{\link[checkmate:makeAssertCollection]{checkmate::makeAssertCollection()}}, for internal use.}

\item{lookup}{A lookup table.}

\item{...}{further arguments to be passed to methods.}
}
\value{
A character matrix of class \link{psSort}.
}
\description{
Stores \emph{one} sort, by one participant as a character \eqn{i * k} matrix, with sorting columns as columns, sorting rows as rows and \emph{short item handles} (see \code{psItems}) in cells.
}
\details{
Sorts can be stored in the form in which they were originally created on a table or in a computer user interface.
The \code{y}-axis, though meaningless (ties) in most studies, is also stored, but this full matrix form makes it easy to reason about the data, and to validate it.

Storing sorts of \emph{several} participants as \emph{lists} of such \code{psSort}s (as is done in \code{psData}) also makes it possible to record sorts where not all participants used exactly the same sorting template (different \code{psGrid}s or tesselation patterns).

Methods are included to rbind \code{psItems} to \code{psData}, as well as to transform them into a tidy matrix.
}
\section{Methods (by generic)}{
\itemize{
\item \code{validate_S3}: Validation
}}

\examples{
grid <- matrix(data = c(FALSE, TRUE, TRUE, TRUE, FALSE, TRUE), nrow = 2)
grid <- as_psGrid(grid)
sort <- matrix(
  data = c(NA, "live_2_work", NA, "work_2_live", NA, NA),
  nrow = 2)
# TODO this creates a logical matrix, that's a BUG
sort <- psSort(
  sort = sort,
  grid = grid,
  items = items_text_en)
}
\concept{S3 classes from `pensieve`.}
