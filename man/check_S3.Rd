% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checks.R
\name{check_S3}
\alias{check_S3}
\alias{test_S3}
\alias{expect_S3}
\alias{assert_S3}
\alias{need_S3}
\alias{validate_S3}
\title{Validate S3 classes from pensieve}
\usage{
check_S3(x, ...)

test_S3(x)

expect_S3(x, info = NULL, label = NULL)

assert_S3(x, collection = NULL, var.name = NULL)

need_S3(x, label = NULL)

validate_S3(x, collection = NULL, var.name = paste(class(x)[1], "S3 class"))
}
\arguments{
\item{x}{An object with one of the pensieve S3 classes.}

\item{...}{further arguments to be passed to methods.}

\item{info}{[\code{character(1)}]\cr
See \code{\link[testthat]{expect_that}}}

\item{label}{[\code{character(1)}]\cr
See \code{\link[testthat]{expect_that}}}

\item{collection}{[\code{\link{AssertCollection}}]\cr
If an \code{\link{AssertCollection}} is provided, the error message is stored
in it. If \code{NULL}, an exception is raised if \code{res} is not
\code{TRUE}.}

\item{var.name}{[\code{character(1)}]\cr
The custom name for \code{x} as passed to any \code{assert*} function.
Defaults to a heuristic name lookup.}
}
\description{
Use \code{check_S3()}, \code{test()}, \code{assert()}, \code{expect()} and \code{need()} to validate  classed objects from this package.
}
\details{
The validation functions all use the same underlying \code{\link[=check_S3]{check_S3()}} methods, but return their results in one of several forms:
\itemize{
\item \strong{\href{https://github.com/mllg/checkmate}{checkmate}} package extensions:
\itemize{
\item \code{check_S3()} returns \code{TRUE} or the error message as a character string,
\item \code{assert()} returns \code{x} invisibly or throws an error,
\item \code{test()} returns \code{TRUE} or \code{FALSE},
\item \code{expect()} always returns an \code{\link[testthat:expectation]{testthat::expectation()}} for internal use with testing via \href{https://github.com/hadley/testthat}{testthat}).
}
\item \strong{\href{https://shiny.rstudio.com}{shiny}} validation:
\itemize{
\item \code{need()} returns \code{NULL} or the error message for interal use with the accio web frontend inside \code{\link[shiny:validate]{shiny::validate()}}.
}
\item \strong{validation} inside pensieve:
\itemize{
\item \code{validate_S3()} returns \code{x} visibly or throws an error.
}
}
}
\examples{
# just for testing; never build objects like this by hand
good_obj <- structure(
  .Data = "I am an item.",
  class = c("psItemContentText", "psItemContent", "character"),
  markup = "plain"
)
bad_obj <- structure(
  .Data = 1L,
  class = c("psItemContentText", "psItemContent", "character") # must be character
)

check_S3(good_obj)
check_S3(bad_obj)
test_S3(good_obj)
test_S3(bad_obj)
expect_S3(good_obj)
# expect_S3(bad_obj) # this errors out
assert_S3(good_obj)
# assert_S3(bad_obj)  # this errors out
need_S3(good_obj)
need_S3(bad_obj)
validate_S3(good_obj)
# validate_S3(bad_obj)  # this errors out
}
\concept{validation functions}
