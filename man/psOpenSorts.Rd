% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/psOpenSorts.R
\name{psOpenSorts}
\alias{psOpenSorts}
\alias{import_psOpenSorts}
\alias{tidy.psOpenSorts}
\alias{autoplot.psOpenSorts}
\title{Store open sorts in a psOpenSort list.}
\usage{
psOpenSorts(open_sorts)

import_psOpenSorts(assignments_messy, descriptions_messy = NULL,
  keep_LETTERS = TRUE)

\method{tidy}{psOpenSorts}(x)

\method{autoplot}{psOpenSorts}(object)
}
\arguments{
\item{open_sorts}{A list of matrices, one for each participant.
Matrices must be \code{\link[=psOpenSort]{psOpenSort()}} objects.}

\item{assignments_messy}{a character matrix with rows as items, columns as participants and  \strong{logical category assignments} as character strings in cells.
Categories are identified by a subset from \code{LETTERS}, same as in \code{descriptions_messy}.
Assignments must be the same subset of \code{LETTERS} as the column names in \code{descriptions_messy}.
Rows and columns must be named.

For example, if some participant assigned her (self-described) categories \code{A}, \code{D} and \code{Z} to some item, the cell for that item and participant would read \code{"A, D, Z"}.
Order and punctuation are ignored.

See \code{note}.}

\item{descriptions_messy}{a character matrix with rows as category indices, columns as participants and \strong{category descriptions} in cells.
Rows \emph{must} be named by a subset of \code{LETTERS} to conveniently enter, and identify them from \code{assignments_messy}.
The row names are arbitrary identifiers, but will be retained for the canonical form.
Columns \emph{must} be named as participants.

Defaults to \code{NULL}, in which case no descriptions are available.

Notice category description in one row have \emph{nothing in common} other than their \emph{indices}:
For example, the category descriptions in a row named \code{'B'} are all by different participants, and may refer to entirely different aspects.
They are only conveniently entered in a table, and all share the fact that they were the \emph{second} description provided.

When some category has not been defined by the participant, the value in the cell should be \code{NA}.
Empty strings \code{""} will also be considered \code{NA}.}

\item{keep_LETTERS}{a logical flag.
Defaults to \code{TRUE}, in which case the \code{LETTERS} for the category descriptions and assignments are retained as names, even though they are just indices and not actual meaningful names (useful for debugging).}

\item{x}{a \link{psOpenSorts}, created by \code{\link[=psOpenSorts]{psOpenSorts()}}.}

\item{object}{a \link{psOpenSorts}, created by \code{\link[=psOpenSorts]{psOpenSorts()}}.}
}
\value{
Object of class \code{psOpenSorts}.
}
\description{
Constructs S3 class for pensieve.
}
\details{
Open sorting categorizations \emph{cannot} be compared between participants, because each participants defines her own dimensions.

\strong{The canonical representation of open sorting data} is therefore a \emph{list} of matrices, one for each participant.
Every \emph{individual} matrix is a \code{\link[=psOpenSort]{psOpenSort()}} object, and together, they form a \code{\link[=psOpenSorts]{psOpenSorts()}} list.
The rows in these matrices are the items, the columns are the dimensions, and cells are the assignment.
Optional dimension descriptions are included as attributes of the matrices.

The canonical representation of open sorts in \code{\link[=psOpenSorts]{psOpenSorts()}} can be cumbersome to enter manually.
For \emph{logical} (nominally-scaled) open sorts, a simpler, but messier format can be conveniently entered as two separate spreadsheets of \code{descriptions_messy} and \code{assignments_messy} using \code{\link[=import_psOpenSorts]{import_psOpenSorts()}}.
}
\section{Functions}{
\itemize{
\item \code{import_psOpenSorts}: descriptions and \emph{logical} assignments from convenient, but messy format
}}

\note{
When a category is assigned, but never described, it is \code{TRUE} in the respective logical matrix entries and their description is \code{NA}:
This is still considered valuable, if incomplete information.
When a category is described, but never assigned, it is omitted from the data entirely.

When \emph{no} category was assigned to some item in \code{assignments_messy}, an empty character string \code{""} should be in the respective cell.

An \code{NA} value implies that the given participant never considered the given items \emph{at all}, across \emph{all} her categories.
Notice this implies \emph{limited scenarios of \code{NA}} for data entered in this messy, convenient form.
The more complicated cases, where a participant did consider \emph{some}, but \emph{not all} items in the assignment of a category, or -- equivalently -- all categories in their assessment of all items, cannot be recorded in this convenience format.
Such more granular \code{NA} records can, however, be recorded in the canonical data representation, where the respective cell of the items x category logical matrix would be \code{NA}.
If your data gathering procedure produces such granular \code{NA} records, do not use this convenience function.
}
\examples{
# create single open sort ====

# Lisas open sort, unnamed descriptions (matched by index)
osort <- matrix(
  data = c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE),
  nrow = 3,
  dimnames = list(items = c("cat", "dog", "cow")))
descriptions <- c(
  "a pet which largely takes care of itself",
  NA  # dimension is assigned, but not described (not a problem)
)
lisa <- psOpenSort(osort = osort, descriptions = descriptions)

# Peters open sort, named descriptions (*also* only matched by index)
osort <- matrix(
  data = c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE),
  nrow = 3,
  dimnames = list(
    items = c("cat", "dog", "cow"),
    categories = c("in_homes", "quiet", "herbivore")
  ))
descriptions <- c(
  in_homes = "Animal found in peoples homes.",
  quiet = "Does not make a lot of noise.",
  herbivore = "Eats plants.")  # defined, but never TRUE (not a problem)
peter <- psOpenSort(osort = osort, descriptions = descriptions)

# coercion methods
peter_m <- as_psOpenSort(osort = as.matrix(x = osort), descriptions = descriptions)
peter_df <- as_psOpenSort(osort = as.data.frame(x = osort), descriptions = descriptions)

# Rebeccas open sort, without any descriptions provided
osort <- matrix(
  data = c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE),
  nrow = 3,
  dimnames = list(handles = c("cat", "dog", "cow")))
rebecca <- psOpenSort(osort = osort, descriptions = NULL)

# Ira open sort, with some problems
osort <- matrix(
  data = c(
    FALSE, FALSE, FALSE,  # this is dropped, b/c there is just no valuable information here,
    TRUE, TRUE, TRUE,  # same problem; no variance
    FALSE, FALSE, FALSE,
    # also no variance, but there *is* a corresponding description,
    # so we're setting column to NA and keeping the description
    NA, TRUE, FALSE),  # you can also have *actual* NAs
  nrow = 3,
  byrow = FALSE,
  dimnames = list(handles = c("cat", "dog", "cow"))
)
descriptions <- c(NA, NA, "mammals", NA)
ira <- suppressWarnings(as_psOpenSort(osort = osort, descriptions = descriptions))
# this gives appropriate warning messages
# psOpenSort() would error out; only coercion method will attempt fix
# Creation ====
# you can combine individual sorts into a list ====
los <- psOpenSorts(open_sorts = list(lisa = lisa, peter = peter, rebecca = rebecca))

# or create psOpenSorts from a more convenient input ====
# recreate messy format from canonical form (don't do this at home)
ass <- pensieve:::make_messy(open_sorts = los)$ass
desc <- pensieve:::make_messy(open_sorts = los)$desc
# these two can be conveniently entered in a spreadsheet program
ass
desc

los_from_messy <- import_psOpenSorts(
  assignments_messy = ass,
  descriptions_messy = desc,
  keep_LETTERS = FALSE)
ggplot2::autoplot(object = los)

}
\seealso{
Other S3 classes from `pensieve`: \code{\link{QItemStrata}},
  \code{\link{QPreSorts}}, \code{\link{QSorts}},
  \code{\link{correlate}}, \code{\link{extract}},
  \code{\link{make_grid}}, \code{\link{psConcourse}},
  \code{\link{psItems}}, \code{\link{psOpenSort}},
  \code{\link{psPeople}}, \code{\link{score}}
}
\concept{S3 classes from `pensieve`}
