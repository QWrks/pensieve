% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/psItemContent.R
\name{psItemContent}
\alias{psItemContent}
\alias{validate_S3.psItemContent}
\title{Store item content as character strings}
\usage{
psItemContent(items, type = "text", lang = NULL, img_dir = NULL)

\method{validate_S3}{psItemContent}(x, ps_coll = NULL, ...)
}
\arguments{
\item{items}{\code{[character()]} giving the \emph{participant-facing} \strong{item content}.
Can be named to provide a short, \emph{researcher-facing} \strong{item handles}.}

\item{type}{\code{[character(1)]} giving the \emph{kind} of item content, must be one of:
\itemize{
\item \code{"text"} (default) for textual item, in which case \code{items} must be text.
Items can be marked up using \href{https://rmarkdown.rstudio.com/authoring_pandoc_markdown.html}{Pandoc Markdown}.
An additional subclass \code{"psItemContentText"} is prepended and validated.
\item \code{"image"} for image items, in which case \code{items} must be file paths, relative from \code{img_dir}.
Images must be \code{*.png}, \code{*.jpg}, \code{*.jpeg} or \code{*.svg}.
An additional subclass \code{"psItemContentImage"} is prepended and validated.
}}

\item{lang}{\code{[character(1)]} giving a language code for \emph{all} items, such as \code{en_US}.
Used for multilingual typsetting support via \href{https://ctan.org/pkg/babel}{LaTeX's babel package}.
Must be one of:
\itemize{
\item \code{NULL} (default), in which case there is no multilingual typesetting support.
\item a \href{https://tools.ietf.org/html/bcp47}{valid BCP 47 language code} supported by pandoc.
See \code{pensieve:::langs} for all available languages.
Ignored unless \code{type = "text"}.
}}

\item{img_dir}{a character string giving the directory for \code{type = "image"}s.
Defaults to \code{NULL}, in which case images are expected at the working directory root \code{\link[base:getwd]{base::getwd()}}.
Ignored unless \code{type = "image"}.
Must be relative path \emph{from the working directory}.
Best constructed with \code{\link[base:file.path]{base::file.path()}}.}

\item{x}{An object with one of the pensieve S3 classes.}

\item{ps_coll}{\code{\link{AssertCollection}} ps_coll error collection via \code{\link[checkmate:makeAssertCollection]{checkmate::makeAssertCollection()}}, for internal use.}

\item{...}{further arguments to be passed to methods.}
}
\value{
A character vector of class \code{psItems}.
}
\description{
Simple helper function to append and validate \code{psItemContent} class.
This class is used as a column class in \code{psItems}.
}
\details{
Storing \strong{full items} can enable deployment and convenience functions, as well as enhance the presentation of results.
}
\section{Methods (by generic)}{
\itemize{
\item \code{validate_S3}: Validation
}}

\examples{
# text items with handles
items_text_en <- psItemContent(
  items = c(
    "live_2_work" = "Man lives to work.",
    "work_2_live" = "Man works to live."
  ),
  type = "text",
  lang = "en-US"
)

# text items without handles
items_text_de <- psItemContent(
  items = c(
    "Man lebt um zu arbeiten.",
    "Man arbeitet, um zu leben."
  ),
  lang = "de-DE"
)

# text items without multilingual typographic support
items_text_esperanto <- psItemContent(
  items = c(
    "Viro vivas por labori.",
    "Viro laboras vivi."
  ),
  lang = NULL
)

# image items
# these images ship with pensieve
# location depends on runtime; ignore next three lines
img_dir <- file.path("..", "..", "inst", "extdata", "fruit")
if (!dir.exists(img_dir)) {
  img_dir <- file.path(system.file(package = "pensieve"), "extdata", "fruit")
}
items_image <- psItemContent(
  items = c("peach.jpg", "pear.jpg"),
  type = "image",
  img_dir = img_dir
)
}
\seealso{
Other S3 classes from `pensieve`: \code{\link{QPreSorts}},
  \code{\link{QSorts}}, \code{\link{correlate}},
  \code{\link{extract}}, \code{\link{psGrid}},
  \code{\link{psOpenSorts}}, \code{\link{psOpenSort}},
  \code{\link{psPeople}}, \code{\link{score}}
}
