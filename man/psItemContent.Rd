% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/psItemContent.R
\name{psItemContent}
\alias{psItemContent}
\alias{validate_S3.psItemContent}
\alias{as_psItemContent}
\alias{as_psItemContent.character}
\alias{as_psItemContent.psSort}
\alias{print.psItemContent}
\alias{knit_print.psItemContentText}
\alias{export_ps.psItemContentText}
\alias{plot.psItemContentText}
\title{Store item content as character strings}
\usage{
psItemContent(items, dir_bin = NULL, lang = NULL,
  fontsize_global = NULL, alignment = "left", linestretch = 2,
  paperwidth = 8.5, paperheight = 5.4, top = 0.5, bottom = 0.5,
  left = 0.5, right = 0.5, unit = "cm", vcentering = TRUE,
  hcentering = TRUE)

\method{validate_S3}{psItemContent}(x, ps_coll = NULL, ...)

as_psItemContent(obj, ...)

\method{as_psItemContent}{character}(obj, ...)

\method{as_psItemContent}{psSort}(obj, ...)

\method{print}{psItemContent}(x, ...)

\method{knit_print}{psItemContentText}(x, inline = FALSE, ...)

\method{export_ps}{psItemContentText}(x, dir = ".", overwrite = FALSE,
  format = "pdf")

\method{plot}{psItemContentText}(x)
}
\arguments{
\item{items}{\code{[character()]} giving the \emph{participant-facing} \strong{item content}.
Can be named to provide short, \emph{researcher-facing} \strong{item handles}.
Names must be unique, valid R names, as per \code{\link[base:make.names]{base::make.names()}}.
If names are missing, they are automatically added using a string of the first unique words.
You can also provide handles as if they were a full item wording.
\itemize{
\item if \code{dir_bin} is \code{NULL} (default), \code{items} must be text.
Items can be marked up using \href{https://rmarkdown.rstudio.com/authoring_pandoc_markdown.html}{Pandoc Markdown}.
An additional subclass \code{psItemContentText} is prepended and validated.
\item if \code{dir_bin} is given, \code{items} must be file paths, relative from \code{dir_bin}.
An additional subclass \code{psItemContentBin`` is prepended and validated. }lang\code{, }fontsize_global\code{, }alignment\code{and}linestretch` are ignored.
}}

\item{dir_bin}{\code{[character(1)]} giving the root from which \code{items} can be found, when \code{items} are paths.
Defaults to \code{NULL}, in which case \code{items} are expected to be texts.
Must be relative path \emph{from the working directory}.}

\item{lang}{\code{[character(1)]} giving a \href{https://tools.ietf.org/html/bcp47}{valid BCP 47 language code} code, such as \code{en_US}.

Must be one of:
\itemize{
\item \code{NULL} in which case there is no multilingual support (\strong{default})
\item \code{'ar-DZ'} for \emph{arabic (Algeria)}
\item \code{'ar-IQ'} for \emph{arabic (Iraq)}
\item \code{'ar-JO'} for \emph{arabic (Jordan)}
\item \code{'ar-LB'} for \emph{arabic (Lebanon)}
\item \code{'ar-LY'} for \emph{arabic (Libya)}
\item \code{'ar-MA'} for \emph{arabic (Morocco)}
\item \code{'ar-MR'} for \emph{arabic (Mauritania)}
\item \code{'ar-PS'} for \emph{arabic (Palestinian Territory)}
\item \code{'ar-SY'} for \emph{arabic (Syria)}
\item \code{'ar-TN'} for \emph{arabic (Tunisia)}
\item \code{'de-DE'} for \emph{german}
\item \code{'de-AT'} for \emph{german (Austria)}
\item \code{'de-CH'} for \emph{german (Switzerland)}
\item \code{'dsb'} for \emph{lower sorbian}
\item \code{'hsb'} for \emph{upper sorbian}
\item \code{'el-polyton'} for \emph{greek (polytonic)}
\item \code{'en-AU'} for \emph{english (Australia)}
\item \code{'en-CA'} for \emph{english (Canada)}
\item \code{'en-GB'} for \emph{english (Great Britain)}
\item \code{'en-NZ'} for \emph{english (New Zealand)}
\item \code{'en-UK'} for \emph{english (United Kingdom)}
\item \code{'en-US'} for \emph{english (United States)}
\item \code{'grc-ancient'} for \emph{greek (ancient)}
\item \code{'la'} for \emph{latin}
\item \code{'sl'} for \emph{slovenian}
\item \code{'fr-CA'} for \emph{french (Canada)}
\item \code{'pt-BR'} for \emph{portoguese (Brazil)}
\item \code{'af'} for \emph{afrikaans}
\item \code{'am'} for \emph{amharic}
\item \code{'ar'} for \emph{arabic}
\item \code{'as'} for \emph{assamese}
\item \code{'ast'} for \emph{asturian}
\item \code{'bg'} for \emph{bulgarian}
\item \code{'bn'} for \emph{bengali}
\item \code{'bo'} for \emph{tibetan}
\item \code{'br'} for \emph{breton}
\item \code{'ca'} for \emph{catalan}
\item \code{'cy'} for \emph{welsh}
\item \code{'cs'} for \emph{czech}
\item \code{'cop'} for \emph{coptic}
\item \code{'da'} for \emph{danish}
\item \code{'dv'} for \emph{divehi}
\item \code{'el'} for \emph{greek}
\item \code{'en'} for \emph{english}
\item \code{'eo'} for \emph{esperanto}
\item \code{'es'} for \emph{spanish}
\item \code{'et'} for \emph{estonian}
\item \code{'eu'} for \emph{basque}
\item \code{'fa'} for \emph{farsi}
\item \code{'fr'} for \emph{french}
\item \code{'fur'} for \emph{friulan}
\item \code{'ga'} for \emph{irish}
\item \code{'gd'} for \emph{scottish}
\item \code{'gez'} for \emph{ethiopic}
\item \code{'gl'} for \emph{galician}
\item \code{'he'} for \emph{hebrew}
\item \code{'hi'} for \emph{hindi}
\item \code{'hr'} for \emph{croatian}
\item \code{'hu'} for \emph{magyar}
\item \code{'hy'} for \emph{armenian}
\item \code{'ia'} for \emph{interlingua}
\item \code{'id'} for \emph{indonesian}
\item \code{'is'} for \emph{icelandic}
\item \code{'it'} for \emph{italian}
\item \code{'km'} for \emph{khmer}
\item \code{'kmr'} for \emph{kurmanji}
\item \code{'kn'} for \emph{kannada}
\item \code{'ko'} for \emph{korean}
\item \code{'lo'} for \emph{lao}
\item \code{'lt'} for \emph{lithuanian}
\item \code{'lv'} for \emph{latvian}
\item \code{'ml'} for \emph{malayalam}
\item \code{'mn'} for \emph{mongolian}
\item \code{'mr'} for \emph{marathi}
\item \code{'nb'} for \emph{norsk}
\item \code{'nl'} for \emph{dutch}
\item \code{'nn'} for \emph{nynorsk}
\item \code{'no'} for \emph{norsk}
\item \code{'nqo'} for \emph{nko}
\item \code{'oc'} for \emph{occitan}
\item \code{'pa'} for \emph{panjabi}
\item \code{'pms'} for \emph{piedmontese}
\item \code{'pt'} for \emph{portoguese}
\item \code{'rm'} for \emph{romanian}
\item \code{'ro'} for \emph{russian}
\item \code{'sa'} for \emph{sanskrit}
\item \code{'se'} for \emph{samin}
\item \code{'sk'} for \emph{slovak}
\item \code{'sq'} for \emph{albanian}
\item \code{'sr'} for \emph{serbian}
\item \code{'syr'} for \emph{syriac}
\item \code{'ta'} for \emph{tamil}
\item \code{'te'} for \emph{telugu}
\item \code{'th'} for \emph{thai}
\item \code{'ti'} for \emph{ethiopic}
\item \code{'tk'} for \emph{turkmen}
\item \code{'tr'} for \emph{turkish}
\item \code{'uk'} for \emph{ukrainian}
\item \code{'ur'} for \emph{urdu} or
\item \code{'vi'} for \emph{vietnamese}
}

Used for multilingual typsetting support via \href{https://ctan.org/pkg/babel}{LaTeX's babel package} and others. \strong{Careful}: Depending on the local tex distribution, not all valid languages may also be supported by LaTeX. Use \code{\link[=check_latex_lang]{check_latex_lang()}} to verify.}

\item{fontsize_global}{\code{[character(1)]} giving the document-wide font size.

Must be one of:
\itemize{
\item \code{NULL} in which case the system default fontsize is used. (\strong{default})
\item \code{'10pt'}
\item \code{'11pt'} or
\item \code{'12pt'}
}}

\item{alignment}{\code{[character(1)]} giving the alignment of the text.

Must be one of:
\itemize{
\item \code{'justified'} (\strong{default})
\item \code{'left'}
\item \code{'right'} or
\item \code{'center'}
}}

\item{linestretch}{\code{[numeric()]}
giving the line spacing in multiples, e.g. \code{1.25}, \code{1.5}.
Defaults to \code{NULL} for default LaTeX line spacing.}

\item{paperwidth}{\code{[numeric(1)]} giving the width and height of documents in \code{unit}.
For good typographical results, should be as close as possible to the \emph{actual} physical measurements of documents encountered by users.
Defaults to \code{NULL}.}

\item{paperheight}{\code{[numeric(1)]} giving the width and height of documents in \code{unit}.
For good typographical results, should be as close as possible to the \emph{actual} physical measurements of documents encountered by users.
Defaults to \code{NULL}.}

\item{top}{\code{[numeric(1)]} giving the margin in \code{unit}.
Defaults to \code{NULL}.}

\item{bottom}{\code{[numeric(1)]} giving the margin in \code{unit}.
Defaults to \code{NULL}.}

\item{left}{\code{[numeric(1)]} giving the margin in \code{unit}.
Defaults to \code{NULL}.}

\item{right}{\code{[numeric(1)]} giving the margin in \code{unit}.
Defaults to \code{NULL}.}

\item{unit}{\code{[character(1)]} giving the units for the above dimensions.

Must be one of:
\itemize{
\item \code{'cm'} for \emph{metric} (\strong{default}) or
\item \code{'in'} for \emph{imperial}
}}

\item{vcentering}{\code{[logical(1)]} indicating whether content should be vertically/horizontally centered.
Defaults to \code{FALSE}.}

\item{hcentering}{\code{[logical(1)]} indicating whether content should be vertically/horizontally centered.
Defaults to \code{FALSE}.}

\item{x}{An object with one of the pensieve S3 classes.}

\item{ps_coll}{\code{\link{AssertCollection}} ps_coll error collection via \code{\link[checkmate:makeAssertCollection]{checkmate::makeAssertCollection()}}, for internal use.}

\item{...}{further arguments to be passed to methods.}

\item{obj}{An object which can be coerced to \link{psItemContent}, currently one of:
\itemize{
\item a (named) character vector.
}}

\item{inline}{\code{[logical(1)]} indicating whether knitr is called from \emph{inline} (\code{r 1+1}) or from a chunk.
Defaults to \code{FALSE}.}

\item{dir}{\code{[character(1)]}
giving the directory where the exported objects are written to.
Must be relative from the working directory.
Defaults to the working directory root.}

\item{overwrite}{\code{[logical(1)]}
indicating whether existing files should be overwritten.
Defaults to \code{FALSE}, in which case the function throws an error if a file exists already.}

\item{format}{\code{[character(1)]} giving the output format to render items in.

Must be one of:
\itemize{
\item \code{'tex'}
\item \code{'pdf'} (\strong{default}) or
\item \code{'svg'}
}}
}
\value{
\code{[character()]} with class \code{\link{psItemContent}}.
}
\description{
Helper function to append and validate \code{\link{psItemContent}} class.
See \href{https://pensieve.maxheld.de/articles/items.html}{vignette} for details.
}
\details{
Store \strong{full items} along with metadata (language, design) to enable deployment and convenience functions, as well as enhance the presentation of results.
}
\section{Methods (by generic)}{
\itemize{
\item \code{validate_S3}: Validation

\item \code{as_psItemContent}: Coerce from character vector

\item \code{as_psItemContent}: Coerce from psSort

\item \code{print}: Printing to the console

\item \code{knit_print}: Printing inside knitr chunks

\item \code{export_ps}: Export rendered text items to vector formats.

\item \code{plot}: Plot rendered item. Defaults to first item.
}}

\section{Printing in knitr chunks}{

Extends the \code{\link[knitr:knit_print]{knitr::knit_print()}} generic for pensieve S3 objects.

By default \code{print()} in knitr will default to \code{\link[knitr:knit_print]{knitr::knit_print()}}, so to nicely print some object \code{obj} inside a chunk, you can just write \code{print(obj)} or even just \code{obj}.

However, to manually invoke or preview the interactive displays in RStudio, you must call \code{\link[knitr:knit_print]{knitr::knit_print()}} in full.
The \code{\link[base:print]{base::print()}}ing method of the underlying classes is \emph{not} altered outside of a knitr chunk.
}

\section{Plotting items}{

Plotting items to the R graphics system has some limitations:
\itemize{
\item You can only plot one item at a time.
The function defaults to the \emph{first} item.
\item The item is placed in the aspect ratio \emph{given by} \code{psItemContent()} in the middle of the plotting area.
There may be additional white space around the item.
This is because R graphics must offer arbitrary aspect ratios, but items have a fixed aspect ratio.
For good-looking results, you should set the aspect ratio of the plotting area to \emph{equal} that of the items.
}
}

\examples{
# text items with handles
items_text_en <- psItemContent(
  items = c(
    "live_2_work" = "Man lives to work.",
    "work_2_live" = "Man works to live."
  ),
  lang = "en-US"
)

# text items without handles
items_text_de <- psItemContent(
  items = c(
    "Man lebt um zu arbeiten.",
    "Man arbeitet, um zu leben."
  ),
  lang = "de-DE"
)

# text items without multilingual typographic support
items_text_esperanto <- psItemContent(
  items = c(
    "Viro vivas por labori.",
    "Viro laboras vivi."
  )
)

# image items
# these images ship with pensieve
# location depends on runtime; ignore next three lines
dir_bin <- file.path("..", "..", "inst", "extdata", "fruit")
if (!dir.exists(dir_bin)) {
  dir_bin <- file.path(system.file(package = "pensieve"), "extdata", "fruit")
}
items_image <- psItemContent(
  items = c("peach.jpg", "pear.jpg"),
  dir_bin = dir_bin
)
}
\seealso{
Other S3 classes from `pensieve`: \code{\link{correlate}},
  \code{\link{extract}}, \code{\link{psClosedSorts}},
  \code{\link{psGrid}}, \code{\link{psOpenSorts}},
  \code{\link{psOpenSort}}, \code{\link{psPeople}},
  \code{\link{score}}

Other print functions: \code{\link{psGrid}}
}
\concept{S3 classes from `pensieve`}
\concept{print functions}
