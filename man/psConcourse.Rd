% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/psConcourse.R
\name{psConcourse}
\alias{psConcourse}
\alias{as_psConcourse}
\alias{as_psConcourse.matrix}
\alias{as_psConcourse.data.frame}
\alias{as_psConcourse.character}
\alias{knit_print.psConcourse}
\title{Store all \strong{full items} in a psConcourse matrix.}
\usage{
psConcourse(concourse, type = "text", markup = "plain", babel = TRUE,
  img_dir = NULL)

as_psConcourse(concourse, type = "text", markup = "plain", babel = TRUE,
  img_dir = NULL, languages = NULL, handles = NULL)

\method{as_psConcourse}{matrix}(concourse, type = "text", markup = "plain",
  babel = TRUE, img_dir = NULL, languages = NULL, handles = NULL)

\method{as_psConcourse}{data.frame}(concourse, type = "text",
  markup = "plain", babel = TRUE, img_dir = NULL, languages = NULL,
  handles = NULL)

\method{as_psConcourse}{character}(concourse, type = "text",
  markup = "plain", babel = TRUE, img_dir = NULL, languages = NULL,
  handles = NULL)

\method{knit_print}{psConcourse}(x, use_js = NULL, ...)
}
\arguments{
\item{concourse}{Participant-facing \strong{full items} as character strings, with researcher-facing \strong{item handles} as names.
See \code{details} for alternative formats.
Full items must be unique by language, and can be \code{NA} if not available (not recommended).
Names must be unique and valid R names.}

\item{type}{a character string giving the \emph{kind} of full item stimuli, must be one of:
\itemize{
\item \code{"text"} for textual items, in which case cells in \code{concourse} must be text.
An additional subclass \code{"psConcourseText"} is prepended and validated.
\item \code{"image"} for image items, in which case cells in \code{concourse} must be file paths, relative from \code{img_dir}.
Images must be \code{*.png}, \code{*.jpg}, \code{*.jpeg} or \code{*.svg}.
An additional class \code{"psConcourseImage"} is prepended and validated.
Defaults to \code{"text"}.
}}

\item{markup}{a character string giving the markup for \code{type = "text"}s.
Defaults to \code{"plain"} for plain text.
Currently only allows \code{"plain"}.
Ignored unless \code{type = "text"}.}

\item{babel}{a logical flag, indicating whether \href{https://ctan.org/pkg/babel}{LaTeX's babel package} should be used for multilingual support.
If \code{TRUE} (default), column names in \code{concourse} must be \href{http://ctan.math.washington.edu/tex-archive/macros/latex/required/babel/base/babel.pdf}{valid babel languages}.
Ignored unless \code{type = "text"}.}

\item{img_dir}{a character string giving the directory for \code{type = "image"}s.
Must be relative path \emph{from the working directory}.
Best constructed with \code{\link[base:file.path]{base::file.path()}}.
Defaults to \code{NULL}, in which case images are expected at the working directory root \code{\link[base:getwd]{base::getwd()}}.
Ignored unless \code{type = "image"}.}

\item{languages}{character vector as an alternative way to give the languages of items.
Defaults to \code{NULL}, in which case languages are expected as (column) names from \code{concourse}.}

\item{handles}{character vector as an alternative way to give the item handles.
Defaults to \code{NULL}, in which case items are expected as (row) names from \code{concourse}.}

\item{x}{An R object to be printed}

\item{use_js}{A logical flag, indicating whether an interactive, java-script variant of the printed result should be returned.
Applicable only to HTML-outputs.
Defaults to \code{NULL}, in which case the appropriate output is inferred from the runtime environment.}

\item{...}{Additional arguments passed to the S3 method. Currently ignored,
except two optional arguments \code{options} and \code{inline}; see
the references below.}
}
\value{
Object of class \code{psConcourse}.
}
\description{
Constructs S3 class for pensieve.
}
\details{
Storing \strong{full items} can enable deployment and convenience functions, as well as enhance the presentation of results.

\strong{Canonically}, \code{\link[=psConcourse]{psConcourse()}} stores the concourse as a matrix with:
\itemize{
\item researcher-facing \strong{item handles} as row names,
\item \strong{languages} as column names and
\item participant-facing \strong{full items} in cells.
}

You can also \strong{coerce} other, more convenient forms via \code{\link[=as_psConcourse]{as_psConcourse()}}:
\itemize{
\item \code{data.frame()}s in the same format,
\item character vectors of full items, with optional names as handles (for monolingual studies only).
}
}
\section{Methods (by generic)}{
\itemize{
\item \code{as_psConcourse}: coerce matrix to psConcourse

\item \code{as_psConcourse}: coerce data.frames to psConcourse

\item \code{as_psConcourse}: coerce named character vector to psConcourse (monolingual concourse)

\item \code{knit_print}: print psConcourse in knitr chunks
}}

\section{Printing in knitr chunks}{

Extends the \code{\link[knitr:knit_print]{knitr::knit_print()}} generic for pensieve S3 object.
When \code{\link[DT:datatable]{DT::datatable()}} is installed (recommended), and \code{use_js} evaluates to \code{TRUE}, an interactive table will be printed.
When printr is installed (recommended), a static table depending on the output format will be printed.
Otherwise, the object is simply \code{\link[base:print]{base::print()}}ed.

By default \code{print()} in knitr will default to \code{\link[knitr:knit_print]{knitr::knit_print()}}, so to nicely print some object \code{obj} inside a chunk, you can just write \code{print(obj)} or even just \code{obj}.

However, to manually invoke or preview the interactive displays in RStudio, you must call \code{\link[knitr:knit_print]{knitr::knit_print()}} in full.
The \code{\link[base:print]{base::print()}}ing method of the underlying classes is \emph{not} altered outside of a knitr chunk.
}

\examples{
# multilingual study, text items ====
m <- matrix(
  data = c(
    "Man lives to work.", "Man lebt, um zu arbeiten.",
    "Man works to live.", "Man arbeitet, um zu leben."),
  nrow = 2,
  byrow = TRUE)

# helper expects handles as rownames, languages as colnames
# see below coercion for easier input
concourse <- m
colnames(concourse) <- c("english", "ngerman")  # "ngerman" is a babel lang
rownames(concourse) <- c("live_2_work", "work_2_live")

multilingual_text <- psConcourse(
  concourse = concourse
)

# for monolingual concourses, just use one column
monolingual_text <- psConcourse(
  concourse = concourse[,"english", drop = FALSE]
)

# monolingual study, image items ====
# this is a directory with some images that ship with pensieve
# location differs depending on runtime; ignore this
img_dir <- file.path("..", "..", "inst", "extdata", "fruit")
if (!dir.exists(img_dir)) {
  img_dir <- file.path(system.file(package = "pensieve"), "extdata", "fruit")
}

monolingual_image <- psConcourse(
  concourse = matrix(
    data = c("peach.jpg",
             "pear.jpg"),
    nrow = 2,
    ncol = 1,
    dimnames = list(
      items = c("peach", "pear"),
      languages = c("english")
   )),
  type = "image",
  img_dir = img_dir
)

# coercion methods ====

# coercion from matrix
# aka providing handles and languages as arguments
from_matrix <- as_psConcourse(
  concourse = m,
  languages = c("english", "ngerman"),
  handles = c("live_2_work", "work_2_live"))

# coercion from data.frame
from_df <- as_psConcourse(concourse = data.frame(concourse))

# coercion from (named) vector (monolingual concourse only)
vec <- concourse[,"english"]
from_vec <- as_psConcourse(vec, languages = "english")


# printing methods ====

# print in knitr chunks
# also works in RStudio interactively
knitr::knit_print(x = multilingual_text, use_js = TRUE, options = NULL)
}
\seealso{
Other S3 classes from `pensieve`: \code{\link{QPreSorts}},
  \code{\link{QSorts}}, \code{\link{correlate}},
  \code{\link{extract}}, \code{\link{make_grid}},
  \code{\link{psItems}}, \code{\link{psOpenSorts}},
  \code{\link{psOpenSort}}, \code{\link{psPeople}},
  \code{\link{score}}
}
\concept{S3 classes from `pensieve`}
\concept{print functions}
